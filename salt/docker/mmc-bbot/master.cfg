# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES


# We'll load our slave passwords from a JSON file which should be inserted into
# buildbot's container via a docker volume mount.
import json
passwords = None
with open('private/passwords.json', 'r') as f:
    passwords = json.load(f)

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [
    BuildSlave('ubuntu64', passwords['ubuntu64']['password'],
        properties={
            'os': 'linux',
            'qt_path': '/opt/qt54/',
            'c_compiler': '/usr/bin/gcc-4.8',
            'cxx_compiler': '/usr/bin/g++-4.8',
        }
    ),
    BuildSlave('ubuntu32', passwords['ubuntu32']['password'],
        properties={
            'os': 'linux',
            'qt_path': '/opt/qt54/',
            'c_compiler': '/usr/bin/gcc-4.8',
            'cxx_compiler': '/usr/bin/g++-4.8',
        }
    ),
    BuildSlave('win32', passwords['win32']['password'],
        properties={
            'os': 'windows',
            'qt_path': 'C:/Qt/5.4/mingw491_32',
            'make_cmd': 'mingw32-make',
            # 'c_compiler': '',
            # 'cxx_compiler': '',
            'cmake_extra_args': [
                '-DZLIB_INCLUDE_DIRS=C:/Qt/5.4/mingw491_32/include/QtZlib',
                '-G', 'MinGW Makefiles',
                '-DCMAKE_GP_CMD_PATHS=C:/Program Files/Microsoft Visual Studio 10.0/VC/bin',
                '-DCMAKE_GP_TOOL=dumpbin',
            ],
        }
    ),
    BuildSlave('osx64-jandal', passwords['osx64-jandal']['password'],
        properties={
            'os': 'osx',
            'qt_path': '/Users/jan/Qt/5.3/clang_64/',
            'c_compiler': '/usr/bin/clang',
            'cxx_compiler': '/usr/bin/clang++',
        }
    ),
]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []

# Scheduler for builds.
c['schedulers'].append(AnyBranchScheduler(
    name="stable",
    change_filter=filter.ChangeFilter(project='MultiMC'),
    treeStableTimer=30,
    builderNames=['ubuntu64', 'ubuntu32', 'osx64', 'win32']
))

# Scheduler for forcing builds.
c['schedulers'].append(ForceScheduler(
    name="force",
    builderNames=['ubuntu64', 'ubuntu32', 'osx64', 'win32']
))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand, Configure, Compile, Test, SetPropertyFromCommand
from buildbot.steps.slave import RemoveDirectory
from buildbot.steps.master import MasterShellCommand
from buildbot.steps.transfer import DirectoryUpload
from buildbot.process.properties import Property, Interpolate, FlattenList, WithProperties

import re

# Haskell would be perfect here...

def ignore_1st(func):
    return lambda _, x: func(x)

def if_os(os):
    """returns a doStepIf function which only returns true on the given OS"""
    def do_if(step):
        return step.build.getProperties()['os'] == os
    return do_if

def if_not(f):
    """returns a doStepIf function which calls the given doStepIf function and inverts it"""
    def do_if(step):
        return not f(step)
    return do_if

def if_should_deploy(step):
    """returns true if the current build should be deployed to GoUpdate"""
    return True


factory = BuildFactory()
# check out the source
factory.addStep(Git(repourl='git://github.com/MultiMC/MultiMC5.git', mode='incremental'))

# configure
factory.addStep(Configure(workdir='build/out',
    command=FlattenList([
        Property('cmake_command', default='cmake'),
        Interpolate('-DCMAKE_C_COMPILER=%(prop:c_compiler:-gcc)s'),
        Interpolate('-DCMAKE_CXX_COMPILER=%(prop:cxx_compiler:-g++)s'),
        '-DCMAKE_BUILD_TYPE=Release',
        '-DMultiMC_NOTIFICATION_URL:STRING=http://files.multimc.org/notifications.json',
        '-DCMAKE_INSTALL_PREFIX:PATH=install',
        Interpolate('-DCMAKE_PREFIX_PATH=%(prop:qt_path)s'),
        Interpolate('-DQt5_DIR=%(prop:qt_path)s'),
        Interpolate('-DMultiMC_CHANLIST_URL=%(prop:update_url)s/update/%(prop:vsn_platform)s/channels.json'),
        Interpolate('-DMultiMC_VERSION_BUILD=%(prop:buildnumber)s'),
        Interpolate('-DMultiMC_VERSION_CHANNEL=%(prop:branch)s'),
        #Interpolate('-DMultiMC_VERSION_TYPE=%(prop:vsn_type)s'), # This is unused.
        Interpolate('-DMultiMC_BUILD_PLATFORM=%(prop:vsn_platform)s'),

        Property('cmake_extra_args', default=[]),
        '..' ])
))

make_cmd = Property('make_cmd', default='make')

# determine the version name
def get_version(rc, stdout, stderr):
    vregex = r'Version: ([0-9.]*[0-9]+)'
    return { 'vsn_name': re.search(vregex, stdout).group(1) }

factory.addStep(SetPropertyFromCommand(
    name='check-version',
    description=['determining', 'version name'],
    descriptionDone=['determine', 'version name'],
    command=[make_cmd, 'version'],
    extract_fn=get_version,
    workdir='build/out'
))

# compile MultiMC
factory.addStep(Compile(
    command=[make_cmd, 'VERBOSE=1'],
    workdir='build/out'
))

# test
factory.addStep(Test(
    command = [make_cmd, 'test'],
    workdir='build/out',
    doStepIf=if_not(if_os('osx'))
))

# remove the install directory
factory.addStep(RemoveDirectory(
    name='clean-install',
    dir='build/out/install',
    description=['cleaning', 'install'],
    descriptionDone=['clean', 'install'],
))

# install
factory.addStep(ShellCommand(
    name="install", workdir='build/out',
    command=[make_cmd, 'install'],
    description=['installing'], descriptionDone=['install'],
))

# on Windows, copy OpenSSL libs into the install dir
factory.addStep(ShellCommand(
    name="add-openssl", workdir='build/out',
    command=["copy", "C:\\OpenSSL-Win32\\*.dll", 'install'],
    description=['adding', 'openssl'], descriptionDone=['add', 'openssl'],
    doStepIf=if_os('windows'),
    hideStepIf=ignore_1st(if_not(if_os('windows'))),
))


# upload artifacts to the master
artifactTmp = '/tmp/mmc-artifacts-%(prop:branch)s-%(prop:vsn_platform)s/'
artifactTmpDist = '/tmp/mmc-artifacts-%(prop:branch)s-%(prop:vsn_platform)s-dist/'

# clean artifacts
factory.addStep(MasterShellCommand(
    name="clean-artifacts",
    command=['rm', '-rf', Interpolate(artifactTmp) ],
    description=['cleaning', 'artifacts'],
    descriptionDone=['clean', 'artifacts'],
))

# clean old dist packages
factory.addStep(MasterShellCommand(
    name="clean-artifacts-dist",
    command=['rm', '-rf', Interpolate(artifactTmpDist)],
    description=['cleaning', 'dist-packages'],
    descriptionDone=['clean', 'dist-packages'],
))

# upload artifacts
factory.addStep(DirectoryUpload(
    name="artifact-upload",
    slavesrc='out/install/',
    masterdest=Interpolate(artifactTmp),
    description=['uploading', 'artifacts'],
    descriptionDone=['upload', 'artifacts'],
))

# make space for the dist packages
factory.addStep(MasterShellCommand(
    name="create-dist-dir",
    command=["mkdir", "-p", Interpolate(artifactTmpDist)],
    description=['mkdir'],
    descriptionDone=['mkdir'],
))

# make a dist package for the site
factory.addStep(MasterShellCommand(
    name="package",
    command=["cd", Interpolate(artifactTmp), '&&', "zip", "-FSr", Interpolate(artifactTmpDist + "mmc-%(prop:branch)s-%(prop:vsn_platform)s.zip"), '.'],
    description=['packaging'],
    descriptionDone=['packaged'],
))

# deploy with GoUpdate
factory.addStep(MasterShellCommand(
    name="deploy",
    command=[
        'repoman --bucket multimc-files -c update/ push',
        Property('vsn_platform'),
        Property('branch'),
        Property('build_number'),
        Property('vsn_name'),
        Interpolate(artifactTmp),
    ],
    description=['deploying'],
    descriptionDone=['deploy'],
))


mmc_build = factory


from buildbot.config import BuilderConfig

c['builders'] = [
    BuilderConfig(
        name='ubuntu64', factory=mmc_build, slavenames=['ubuntu64'],
        properties=dict(
            update_url='https://multimc-files.s3.amazonaws.com',
            vsn_platform='lin64',
        )
    ),
    BuilderConfig(
        name='ubuntu32', factory=mmc_build, slavenames=['ubuntu32'],
        properties=dict(
            update_url='https://multimc-files.s3.amazonaws.com',
            vsn_platform='lin32',
        )
    ),
    BuilderConfig(
        name='osx64', factory=mmc_build, slavenames=['osx64-jandal'],
        properties=dict(
            update_url='https://multimc-files.s3.amazonaws.com',
            vsn_platform='osx64',
        )
    ),
    BuilderConfig(
        name='win32', factory=mmc_build, slavenames=['win32'],
        properties=dict(
            update_url='https://multimc-files.s3.amazonaws.com',
            vsn_platform='win32',
        )
    ),
]
# c['builders'].append(BuilderConfig(name="runtests",
#       slavenames=["example-slave"],
#       factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([('peterix', str(passwords['peterix']['password']))]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)

c['status'].append(html.WebStatus(
    http_port=8010, authz=authz_cfg,
    change_hook_dialects={"github": True}
))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "MultiMC"
c['titleURL'] = "http://multimc.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://ci.dwarven.engineer/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
